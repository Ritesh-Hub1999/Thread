MUTEX : Mutual Exclusion

mutex is used on race condition

RACE CONDITION:
-------------
0. Race condition is a situation
   where two or more threads/process
   happens to change a common data at
   the same time.
   
1. If there is a race condition then we
   have to protect it and the protected 
   section is  called critical section/region.

MUTEX:
0. Mutex is used to avoid race condition.
1. We use lock() , unlock() on mutex to 
   avoid race condition.
   
CODE:
----
#include <iostream>
#include <thread>
#include <mutex>
using namespace std;

int data = 0;
mutex m;
void func1(){
    m.lock();
    ++data;
    m.unlock();
}

int main()
{
    thread t1(func1);
    thread t2(func1);
    t1.join();
    t2.join();
    cout<<data<<endl;
    
}
